#ifndef RECEIVETIMERINPUTCAPTURE_H_
#define RECEIVETIMERINPUTCAPTURE_H_

#include "msp.h"
#include "Configure.h"
#include "Defines.h"
#include "receive.h"

// Configure rising-edge capture
#define CONFIGURE_RECEIVE_RISING_AS_AN_INPUT    RECEIVE_RISING_PORT->DIR &= ~RECEIVE_RISING_MASK
#define CONFIGURE_RECEIVE_RISING_SEL1           RECEIVE_RISING_PORT->SEL1 &= ~RECEIVE_RISING_MASK
#define CONFIGURE_RECEIVE_RISING_SEL0           RECEIVE_RISING_PORT->SEL0 |= RECEIVE_RISING_MASK
#define RECEIVE_RISING_CCR_INTERRUPT_FLAG       (MPE_RECEIVE_TIMER->CCTL[RECEIVE_TIMER_CCR_RISING] & TIMER_A_CCTLN_CCIFG)
#define CLEAR_RECEIVE_RISING_INTERRUPT_FLAG     MPE_RECEIVE_TIMER->CCTL[RECEIVE_TIMER_CCR_RISING] &= ~TIMER_A_CCTLN_CCIFG

// Configure falling-edge capture
#define CONFIGURE_RECEIVE_FALLING_AS_AN_INPUT   RECEIVE_FALLING_PORT->DIR &= ~RECEIVE_FALLING_MASK
#define CONFIGURE_RECEIVE_FALLING_SEL1          RECEIVE_FALLING_PORT->SEL1 &= ~RECEIVE_FALLING_MASK
#define CONFIGURE_RECEIVE_FALLING_SEL0          RECEIVE_FALLING_PORT->SEL0 |= RECEIVE_FALLING_MASK
#define RECEIVE_FALLING_CCR_INTERRUPT_FLAG      (MPE_RECEIVE_TIMER->CCTL[RECEIVE_TIMER_CCR_FALLING] & TIMER_A_CCTLN_CCIFG)
#define CLEAR_RECEIVE_FALLING_INTERRUPT_FLAG    MPE_RECEIVE_TIMER->CCTL[RECEIVE_TIMER_CCR_FALLING] &= ~TIMER_A_CCTLN_CCIFG

// Function prototypes
void ReceiveTimerCaptureInitialization(QueReturnErrors (*RisingEdgeTask)(EdgeType edge,uint16_t time),
		QueReturnErrors (*FallingEdgeTask)(EdgeType edge, uint16_t time));
void ReceiveTimerStop(void);

#endif
